// all this is shameless stolen from https://github.com/jonsuh/hamburgers
// thank you Jonathan for making my life easier
// Settings
// ==================================================

$hamburger-padding-x: 0 !default;
$hamburger-padding-y: 15px !default;
$hamburger-layer-width: 32px !default;
$hamburger-layer-height: 4px !default;
$hamburger-layer-spacing: 4px !default;
$hamburger-layer-color: palette('gray') !default;
$hamburger-layer-border-radius: 4px !default;
$hamburger-hover-opacity: 0.7 !default;
$hamburger-active-layer-color: $hamburger-layer-color !default;
$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter: opacity(50%) !default;
$hamburger-active-hover-filter: $hamburger-hover-filter !default;

.hamburger {
  display: inline-block;

  padding: $hamburger-padding-y $hamburger-padding-x;
  margin: 0;
  overflow: visible;

  // Normalize (<button>)
  font: inherit;
  color: inherit;
  text-transform: none;

  cursor: pointer;

  background-color: transparent;
  border: 0;

  transition-timing-function: linear;
  transition-duration: 0.15s;
  transition-property: opacity, filter;

  &:hover {
    @if $hamburger-hover-use-filter == true {
      filter: $hamburger-hover-filter;
    } @else {
      opacity: $hamburger-hover-opacity;
    }
  }

  &.is-active {
    &:hover {
      @if $hamburger-hover-use-filter == true {
        filter: $hamburger-active-hover-filter;
      } @else {
        opacity: $hamburger-active-hover-opacity;
      }
    }

    .hamburger-inner,
    .hamburger-inner::before,
    .hamburger-inner::after {
      background-color: $hamburger-active-layer-color;
    }
  }
}

.hamburger-box {
  position: relative;

  display: inline-block;

  width: $hamburger-layer-width;
  height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
}

.hamburger-inner {
  top: 50%;

  display: block;

  margin-top: $hamburger-layer-height / -2;

  &,
  &::before,
  &::after {
    position: absolute;

    width: $hamburger-layer-width;
    height: $hamburger-layer-height;

    background-color: $hamburger-layer-color;
    border-radius: $hamburger-layer-border-radius;

    transition-timing-function: ease;
    transition-duration: 0.15s;
    transition-property: transform;
  }

  &::before,
  &::after {
    display: block;

    content: '';
  }

  &::before {
    top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }

  &::after {
    bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }
}

.hamburger--squeeze {
  .hamburger-inner {
    transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
    transition-duration: 0.075s;

    &::before {
      transition: top 0.075s 0.12s ease, opacity 0.075s ease;
    }

    &::after {
      transition: bottom 0.075s 0.12s ease, transform 0.075s cubic-bezier(0.55, 0.055, 0.675, 0.19);
    }
  }

  &.is-active {
    .hamburger-inner {
      transition-delay: 0.12s;
      transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
      transform: rotate(45deg);

      &::before {
        top: 0;

        opacity: 0;

        transition: top 0.075s ease, opacity 0.075s 0.12s ease;
      }

      &::after {
        bottom: 0;

        transition: bottom 0.075s ease, transform 0.075s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);
        transform: rotate(-90deg);
      }
    }
  }
}
